//
//  PagesViewController.swift
//  Comics
//
//  Created by Alex Zbirnik on 26.03.17.
//  Copyright (c) 2017 com.alexzbirnik. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol PagesViewControllerInput {
    
    func displaySomething(viewModel: Pages.Something.ViewModel)
}

protocol PagesViewControllerOutput {
    
    func doSomething(request: Pages.Something.Request)
    var list: [StuffModel]? { get set}
}

class PagesViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate, PagesViewControllerInput {
    
    var output: PagesViewControllerOutput!
    var router: PagesRouter!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        
        PagesConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configurePageViewController()
        self.createAndSetPages()
    }
    
    //MARK: - Pages
    
    var pages: [UIViewController] = []
    var selectedIndex: Int = 0
    
    func configurePageViewController() {
        
        self.delegate = self
        self.dataSource = self
    }
    
    func createAndSetPages() {
        
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        
        for stuff in self.output.list! {

            let page =
                storyboard.instantiateViewController(withIdentifier: DetailViewController.reuseIdentifier) as! DetailViewController
            
            page.output.stuff = stuff
            self.pages.append(page)
        }
        
        self.setViewControllers([self.pages[self.selectedIndex]],
                                direction: UIPageViewControllerNavigationDirection.forward,
                                animated: false, completion: nil)
        
    }
    
    //MARK: - UIPageViewControllerDataSource
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        
        let currentIndex =  self.pages.index(of: viewController)!
        let rightIndex = abs((currentIndex + 1) %  self.pages.count)
        
        return self.pages[rightIndex]
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        
        let currentIndex =  self.pages.index(of: viewController)!
        
        if currentIndex == 0 {
            
            let leftIndex = self.pages.count - 1
            return self.pages[leftIndex]
            
        } else {
            
            let leftIndex = abs((currentIndex - 1) %  self.pages.count)
            return self.pages[leftIndex]
        }
    }
    
    func presentationCountForPageViewController(pageViewController: UIPageViewController) -> Int {
        
        return  self.pages.count
    }
    
    func presentationIndexForPageViewController(pageViewController: UIPageViewController) -> Int {
        return 0
    }
    
    // MARK: - Event handling
    
    func doSomethingOnLoad() {
        // NOTE: Ask the Interactor to do some work
        
        let request = Pages.Something.Request()
        output.doSomething(request: request)
    }
    
    // MARK: - Display logic
    
    func displaySomething(viewModel: Pages.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
    }
}
