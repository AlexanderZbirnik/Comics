//
//  ListWorker.swift
//  Comics
//
//  Created by Alex Zbirnik on 26.03.17.
//  Copyright (c) 2017 com.alexzbirnik. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class ListWorker{
    
    // MARK: - Business Logic
    
    class func stuffWith(itemId: String, from list:[StuffModel])->StuffModel {
        
        let filtered = list.filter { $0.itemId == itemId }
        
        return filtered.first!
    }
    
    func getStuffListWith(url: String, completion: @escaping (Array<StuffModel>) -> (), failure: @escaping (String) -> ()) {
        
        NetworkManager.shared.getList(with: url, completion: { (responseArray) in
            
            let list = self.stuffListFromResponse(array: responseArray as! Array<[String : String]>)
            
            completion(list)
            
        }) { (error) in
            
            failure(error.description)
        }
    }
    
    func stuffListFromResponse(array: Array<[String:String]>)->[StuffModel] {
        
        var stuffList: [StuffModel] = []
        
        for dict in array {
            
            let stuff = self.stuffFrom(dictionary: dict)
            stuffList.append(stuff)
        }
        
        return stuffList
    }
    
    func stuffFrom(dictionary:[String:String])->StuffModel {
        
        let itemId = dictionary["itemId"]
        let name = dictionary["name"]
        let imageUrl = dictionary["image"]
        let description = dictionary["description"]
        var date: Date = Date()
        
        if  let posixDateString = (dictionary["time"]) {
            
            date = dateFrom(posixDate: posixDateString)
        }
        
        return StuffModel(itemId: itemId!, name: name!, imageUrl: imageUrl!, description: description!, date: date)
    }
    
    func dateFrom(posixDate: String) ->(Date) {
        
        let posixDateValue = Double(posixDate)
        let timeInterval = TimeInterval(posixDateValue!) / 1000
        
        return Date(timeIntervalSince1970:  timeInterval)
    }
}
