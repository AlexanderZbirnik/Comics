//
//  ListViewController.swift
//  Comics
//
//  Created by Alex Zbirnik on 26.03.17.
//  Copyright (c) 2017 com.alexzbirnik. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListViewControllerInput {
    
    func displayStuffList(viewModel: List.Stuff.ViewModel)
}

protocol ListViewControllerOutput {
    
    func fetchStuffList(request: List.Stuff.Request)
    func filteredStuffList(request: List.Stuff.Request)
    func fetchLocalStuffList(request: List.Stuff.Request)
    var list: [StuffModel]? { get set }
}

class ListViewController: UIViewController, ReuseIdentifierProtocol, ViewControllerTransitionProtocol, ListViewControllerInput {
    
    var output: ListViewControllerOutput!
    var router: ListRouter!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        
        ListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configureSearchBar()
        self.fetchStuffListOnLoad()
    }
    
    // MARK: - TableView
    
    @IBOutlet weak var tableView: TableView!
    
    var displayedStuffList: [List.Stuff.ViewModel.DisplayedStuff] = []
    var palceholderName = ""
    
    // MARK: - Search
    
    @IBOutlet weak var searchBar: UISearchBar!
    
    func configureSearchBar() {
        
        let cancelButtonAttributes: NSDictionary = [NSForegroundColorAttributeName: UIColor.gray]
        UIBarButtonItem.appearance().setTitleTextAttributes(cancelButtonAttributes as? [String : AnyObject], for: UIControlState.normal)
    }

    // MARK: - Event handling
    
    func fetchStuffListOnLoad(){
        
        let request = List.Stuff.Request(searchText: "")
        self.output.fetchStuffList(request: request)
    }
    
    // MARK: - Display logic
        
    func displayStuffList(viewModel: List.Stuff.ViewModel) {
        
        self.displayedStuffList = viewModel.displayedStuff
        self.palceholderName = viewModel.placeholderName
        self.tableView.reloadData()
    }
}

extension ListViewController: UISearchBarDelegate {
    
    // MARK: - UISearchBarDelegate
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
        searchBar.endEditing(true)
        
        let request = List.Stuff.Request(searchText: searchBar.text!)
        self.output.filteredStuffList(request: request)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
        searchBar.text = ""
        searchBar.endEditing(true)
        
        if self.displayedStuffList.count < (self.output.list?.count)! {
            
            let request = List.Stuff.Request(searchText: "")
            self.output.fetchLocalStuffList(request: request)
        }
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
        if searchText.characters.count == 0{
            
            let request = List.Stuff.Request(searchText: "")
            self.output.fetchLocalStuffList(request: request)
        }
    }
}

extension ListViewController: UITableViewDataSource, UITableViewDelegate {
    
    // MARK: - UITableViewDataSource
    
    func numberOfSections(in tableView: UITableView) -> Int {
        
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return self.displayedStuffList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell:StuffCell = tableView.dequeueReusableCell(withIdentifier: StuffCell.reuseIdentifier) as! StuffCell!
        
        let stuff = self.displayedStuffList[indexPath.row]
        
        cell.stuffNameLabel.text = stuff.name
        cell.stuffDateLabel.text = stuff.date
        cell.stuffImageView.downloadImage(url: stuff.imageUrl,
                                          placeholder: UIImage(named: self.palceholderName)!,
                                          activityIndicatorLarge: false)
        
        return cell
    }
    
    // MARK: - UITableViewDelegate
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        self.router.navigationToDetailsWithSelected(index: indexPath.row) {
            
            self.tableView.alpha = 0
            self.searchBar.alpha = 0
        }
    }
}



